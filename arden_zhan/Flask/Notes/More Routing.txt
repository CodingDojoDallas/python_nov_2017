More Routing

Routing can be thought of as the traffic control of our applications

When request comes in, routing for application will determine where the request will go and how to generate the response

Created form_test

About Forms
- modern internet is user-driven
- much of actual content of website is generated by users of a website

FORMS are used for the user to manage/get his/her data to the page
- html forms are way users can pass data to back end of website, where it can be processed and stored
- processing form dadta is huge part of what it takes to become a back-end developer

form tag
- everything within the html tag can be transmitted to another page

action attribute
- form's action attribute will be set equal to the route where the info, contained within the form, will be sent to
- will send to route '/something'
- all code for handling this form data will be contained in this route
- every request/route has a URL and an HTTP verb or method

method attribute
- set to GET or POST
- GET request for insensitive info, POST for passing sensitive info
- method attribute specifies the type of HTTP request by how the dev wants to have form info transferred
- if form data contains sensitive info, use POST!!
- if info is insensitive like a library search, it's fine to use GET as method
- In general, forms with POST method, sending responses with the GET method

input element
- the form tag will set up logistics, but info you want to gather will be harvested from the elements you place within the form. several types of input you can use to gather data
    - text: basic collector for text
    - radio button: want user to select from number of options
    - password: like text, but the text entered will be disguised
    - checkbox: when user must be prompted for yes/no type argument
    - and more 

Each input must be assigned a name attribute if you want each input to be recognized by server-side code
    - HTML form gathers data and creates set of key/value pairs with name attributes as keys, user entered data as values
    - name given to each input element that reflects the info we want to gather

^ front end
    - form data sent to server when the user clicks submit button. form data organized into key/value pairs and submitted to URL specified by form's action attribute, using the HTTP method specified by form's method attribute



Handling POST request on Server 
@app.route('/users', methods=['POST'])
- server is listening for a POST request to localhost:5000/users
- to access data that user inputs into fields, we use request.form['name_of_input']
- from the form's input's name attributes

name = request.form['name'] , ['email']

return redirect('/') redirects us back to root


Specifying Allowed Methods
It is possible to put more than one value into the methods array. How?????????
methods=['POST']

Accessing Data 
We can access form data with 
request.form['name_of_input']
    - name given to each HTML input is significant
    - on server-side, we can access data that was input in a field from a user through the request.form
    - request.form is a dictionary with key,value pairs
    - print request.form is useful for debugging
    - can store data with my_data = request.form['name_of_input']
    - the TYPE of anything that comes in through the request.form will always be String
        - if want value to be identified as actual number, need to type cast it

Redirecting
redirecting is critical

return redirect('/route_goes_here') can be used to redirect any route that we have defined



ALWAYS REDIRECT AFTER HANDLING POST DATA TO AVOID HAVING DATA BEING HANDLED MORE THAN ONCE

otherwise, if you reload page after submitting form, you re-submit the request to your '/users' route every time you hit reload. Since you don't have a redirect.
    - bad. bad user experience. bad strain on server

So far have just been sending POST info to server, but not putting to use yet. Will learn how to store info in database, retrieve, and output to other pages.
